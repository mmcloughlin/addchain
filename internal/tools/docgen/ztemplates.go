// Code generated by assets compiler. DO NOT EDIT.
	
package main

var (
	templates = map[string]string{
"/readme.tmpl": "<p align=\"center\">\n  <img src=\"logo.svg\" width=\"40%\" border=\"0\" alt=\"addchain\" />\n</p>\n\n<p align=\"center\">Cryptographic Addition Chain Generation in Go</p>\n\n`addchain` generates short addition chains for exponents of cryptographic\ninterest with [results](#results) rivaling the best hand-optimized chains.\nIntended as a building block in elliptic curve or other cryptographic code\ngenerators.\n\n* Suite of algorithms from academic research: continued fractions,\n  dictionary-based and Bos-Coster heuristics\n* Custom run-length techniques exploit structure of cryptographic exponents\n  with excellent results on Solinas primes\n* Generic optimization methods eliminate redundant operations\n* Simple domain-specific language for addition chain computations\n* Command-line interface or library\n\n## Results\n\nResults for common cryptographic exponents and delta compared to [best known\nhand-optimized addition\nchains](https://briansmith.org/ecc-inversion-addition-chains-01).\n\n| Name | Length | Best | Delta |\n| ---- | -----: | ---: | ----: |\n{{ range .Results -}}\n{{- if gt .BestKnown 0 -}}\n| [{{ .Name }}](doc/results.md#{{ anchor .Name }}) | {{ .Length }} | {{ .BestKnown }} | {{ printf \"%+d\" .Delta }} |\n{{ end -}}\n{{ end }}\n\nSee [full results listing](doc/results.md) for more detail and additional\nexponents.\n\n## Usage\n\n### Command-line Interface\n\nInstall:\n\n```\ngo get -u github.com/mmcloughlin/addchain/cmd/addchain\n```\n\nSearch for a curve25519 field inversion addition chain with:\n\n```sh\n{{ include \"internal/examples/cli/cmd.sh\" -}}\n```\n\nOutput:\n\n```\n{{ include \"internal/examples/cli/output\" -}}\n```\n\n### Library\n\nInstall:\n\n```\ngo get -u github.com/mmcloughlin/addchain\n```\n\nAlgorithms all conform to the {{ sym \"alg\" \"ChainAlgorithm\" }} or\n{{ sym \"alg\" \"SequenceAlgorithm\" }} interfaces and can be used directly. However the\nmost user-friendly method uses the {{ pkg \"alg/ensemble\" }} package to\ninstantiate a sensible default set of algorithms and the {{ pkg \"alg/exec\" }}\nhelper to execute them in parallel. The following code uses this method to\nfind an addition chain for curve25519 field inversion:\n\n```go\n{{ snippet \"alg/exec/example_test.go\" \"func Example\" \"^}\" -}}\n```\n\n## Algorithms\n\n### Binary\n\nThe {{ pkg \"alg/binary\" }} package implements the addition chain equivalent\nof the basic [square-and-multiply exponentiation\nmethod](https://en.wikipedia.org/wiki/Exponentiation_by_squaring). It is\nincluded for completeness, but is almost always outperformed by more advanced\nalgorithms below.\n\n### Continued Fractions\n\nThe {{ pkg \"alg/contfrac\" }} package implements the continued fractions\nmethods introduced by Bergeron-Berstel-Brlek-Duboc in 1989. This approach\nutilizes a decomposition of an additon chain akin to continued fractions:\n\n```\n(1,..., k,..., n) = (1,...,n mod k,..., k) {{ \"\\u2299\" }} (1,..., n/k) {{ \"\\u2295\" }} (n mod k).\n```\n\n### Bos-Coster Heuristics\n\n### Dictionary\n\n### Optimization\n\n## Thanks\n\nThank you to [Tom Dean](https://web.stanford.edu/~trdean/), [Riad\nWahby](https://wahby.org/) and [Brian Smith](https://briansmith.org/) for\nadvice and encouragement.\n\n## Contributing\n\nContributions to `addchain` are welcome:\n\n* [Submit bug reports](https://github.com/mmcloughlin/addchain/issues/new) to\n  the issues page.\n* Suggest [test cases](https://github.com/mmcloughlin/addchain/blob/e6c070065205efcaa02627ab1b23e8ce6aeea1db/internal/results/results.go#L62)\n  or update best-known hand-optimized results.\n* Pull requests accepted. Please discuss in the [issues section](https://github.com/mmcloughlin/addchain/issues)\n  before starting significant work.\n\n## License\n\n`addchain` is available under the [BSD 3-Clause License](LICENSE).\n",
"/results.tmpl": "# Results\n\n{{ range .Results -}}\n* [{{ .Name }}](#{{ anchor .Name }})\n{{ end }}\n\n{{ range .Results -}}\n## {{ .Name }}\n\n| Property | Value |\n| --- | ----- |\n| _N_ | `{{ .N.String }}` |\n| _d_ | `{{ .D }}` |\n| _N_-_d_ | `{{ printf \"%x\" .Target }}` |\n| Length | {{ .Length }} |\n| Algorithm | `{{ .AlgorithmName }}` |\n{{- if gt .BestKnown 0 }}\n| Best Known | {{ .BestKnown }} |\n| Delta | {{ printf \"%+d\" .Delta }} |\n{{ end }}\n\nAddition chain produced by `addchain`:\n\n```go\n{{ include (printf \"internal/results/testdata/%s.golden\" .Slug) }}```\n\n{{ end }}\n",
}
)