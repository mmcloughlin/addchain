<p align="center">
  <img src="logo.svg" width="40%" border="0" alt="addchain" />
</p>

<p align="center">Cryptographic Addition Chain Generation in Go</p>

`addchain` generates short addition chains for exponents of cryptographic
interest with [results](#results) rivaling the best hand-optimized chains.
Intended as a building block in elliptic curve or other cryptographic code
generators.

* Suite of algorithms from academic research: continued fractions,
  dictionary-based and Bos-Coster heuristics
* Custom run-length techniques exploit structure of cryptographic exponents
  with excellent results on Solinas primes
* Generic optimization methods eliminate redundant operations
* Simple domain-specific language for addition chain computations
* Command-line interface or library

## Results

Results for common cryptographic exponents and delta compared to [best known
hand-optimized addition
chains](https://briansmith.org/ecc-inversion-addition-chains-01).

| Name | Length | Best | Delta |
| ---- | -----: | ---: | ----: |
{{ range .Results -}}
{{- if gt .BestKnown 0 -}}
| [{{ .Name }}](doc/results.md#{{ anchor .Name }}) | {{ .Length }} | {{ .BestKnown }} | {{ printf "%+d" .Delta }} |
{{ end -}}
{{ end }}

See [full results listing](doc/results.md) for more detail and additional
exponents.

## Usage

### Command-line Interface

Install:

```
go get -u github.com/mmcloughlin/addchain/cmd/addchain
```

Search for a curve25519 field inversion addition chain with:

```sh
{{ include "internal/examples/cli/cmd.sh" -}}
```

Output:

```
{{ include "internal/examples/cli/output" -}}
```

### Library

Install:

```
go get -u github.com/mmcloughlin/addchain
```

Algorithms all conform to the {{ sym "alg" "ChainAlgorithm" }} or
{{ sym "alg" "SequenceAlgorithm" }} interfaces and can be used directly. However the
most user-friendly method uses the {{ pkg "alg/ensemble" }} package to
instantiate a sensible default set of algorithms and the {{ pkg "alg/exec" }}
helper to execute them in parallel. The following code uses this method to
find an addition chain for curve25519 field inversion:

```go
{{ snippet "alg/exec/example_test.go" "func Example" "^}" -}}
```

## Algorithms

### Binary

The {{ pkg "alg/binary" }} package implements the addition chain equivalent
of the basic [square-and-multiply exponentiation
method](https://en.wikipedia.org/wiki/Exponentiation_by_squaring). It is
included for completeness, but is almost always outperformed by more advanced
algorithms below.

### Continued Fractions

The {{ pkg "alg/contfrac" }} package implements the continued fractions
methods introduced by Bergeron-Berstel-Brlek-Duboc in 1989. This approach
utilizes a decomposition of an additon chain akin to continued fractions:

```
(1,..., k,..., n) = (1,...,n mod k,..., k) {{ "\u2299" }} (1,..., n/k) {{ "\u2295" }} (n mod k).
```

### Bos-Coster Heuristics

### Dictionary

### Optimization

## Thanks

Thank you to [Tom Dean](https://web.stanford.edu/~trdean/), [Riad
Wahby](https://wahby.org/) and [Brian Smith](https://briansmith.org/) for
advice and encouragement.

## Contributing

Contributions to `addchain` are welcome:

* [Submit bug reports](https://github.com/mmcloughlin/addchain/issues/new) to
  the issues page.
* Suggest [test cases](https://github.com/mmcloughlin/addchain/blob/e6c070065205efcaa02627ab1b23e8ce6aeea1db/internal/results/results.go#L62)
  or update best-known hand-optimized results.
* Pull requests accepted. Please discuss in the [issues section](https://github.com/mmcloughlin/addchain/issues)
  before starting significant work.

## License

`addchain` is available under the [BSD 3-Clause License](LICENSE).
