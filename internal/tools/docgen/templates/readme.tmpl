<p align="center">
  <img src="logo.svg" width="40%" border="0" alt="addchain" />
</p>

<p align="center">Cryptographic Addition Chain Generation in Go</p>

`addchain` generates short addition chains for exponents of cryptographic
interest, with [results](#results) close to or exceeding the best
hand-optimized chains.

* Suite of algorithms from **academic research**: continued fractions methods
  of Bergeron-Berstel-Brlek-Duboc, dictionary-based approaches and Bos-Coster
  heuristics.
* **Novel techniques** exploiting structure of cryptographic exponents: custom
  run-length method with excellent results on Solinas primes

## Results

| Name | _N_ | _d_ | Length | Best | Delta |
| ---- | --- | --- | -----: | ---: | ----: |
{{ range .Results -}}
{{- if gt .BestKnown 0 -}}
| {{ .Name }} | {{ if lt (len .N.String) 30 }}`{{ .N }}`{{ else }}_too long_{{ end }} | {{ .D }} | {{ .Length }} | {{ .BestKnown }} | {{ printf "%+d" .Delta }} |
{{ end -}}
{{ end }}
